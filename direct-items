#!/usr/bin/env python

from lib import Config
from lib import Database
from lib import Lodestone
from multiprocessing import Pool, Queue, Process

db = Database()
config = Config()
ls = Lodestone(config.character(), config.session_id())

def download(in_queue, out_queue):
  while not in_queue.empty():
    id = in_queue.get(True)
    print(f'Queue Size: {in_queue.qsize()}')
    try:
      item = ls.download_item_minimal(id)
      out_queue.put(item)
    except:
      print(f"[Error] {id}")
      break

def save(queue):
  while True:
    item = queue.get()
    if item is None:
      break
    db.save_recipe(item)
    print(f'[S] {item.id} = {item.name}')

download_queue = Queue()
save_queue = Queue()

for row in db.execute('''
    select ingredients.item_id
    from ingredients
      left join items on ingredients.item_id = items.id
    where items.id is null
    group by ingredients.item_id;'''):
  download_queue.put(row[0])

save_process = Process(target=save, args=(save_queue, ))
save_process.start()

download_pool = Pool(8, download, (download_queue, save_queue))

download_pool.close()
download_pool.join()

save_queue.put(None)
save_process.join()

print('Done...')
